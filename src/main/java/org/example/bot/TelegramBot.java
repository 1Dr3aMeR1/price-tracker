package org.example.bot;

import org.example.model.Product;
import org.example.repository.impl.ProductRepositoryImpl;
import org.example.service.ProductService;
import org.example.service.impl.ProductServiceImpl;

import org.example.service.impl.UserServiceImpl;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.sql.SQLException;
import java.util.*;

public class TelegramBot extends TelegramLongPollingBot {

    private final String username;
    private final String token;
    private final ProductService productService;

    private final Map<Long, String> userStates = new HashMap<>();

    public TelegramBot(String username, String token) throws SQLException {
        this.username = username;
        this.token = token;
        this.productService = new ProductServiceImpl(new ProductRepositoryImpl());
    }

    @Override
    public String getBotUsername() {
        return username;
    }

    @Override
    public String getBotToken() {
        return token;
    }

    @Override
    public void onUpdateReceived(Update update) {
        if (!update.hasMessage() || !update.getMessage().hasText()) return;

        String text = update.getMessage().getText();
        long chatId = update.getMessage().getChatId();

        try {
            if ("WAITING_PRODUCT_NAME".equals(userStates.get(chatId))) {
                String productName = text.trim();
                if (productName.isEmpty()) {
                    sendText(chatId, "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
                    return;
                }

                productService.createProduct((int) chatId, productName, null);
                sendText(chatId, "‚úÖ –¢–æ–≤–∞—Ä \"" + productName + "\" —Å–æ–∑–¥–∞–Ω. –¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤—å—Ç–µ –ª–æ—Ç—ã —á–µ—Ä–µ–∑ –º–µ–Ω—é.");
                userStates.remove(chatId); // —Å–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
                return;
            }

            if (text.equals("/start")) {
                new UserServiceImpl().registerUser(chatId, update.getMessage().getFrom().getUserName());
                sendMessage(ButtonKeboard.withMainMenu(chatId, "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:"));
            } else if (text.equals("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä")) {
                sendText(chatId, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:");
                userStates.put(chatId, "WAITING_PRODUCT_NAME");
            } else if (text.equals("üìã –ú–æ–∏ —Ç–æ–≤–∞—Ä—ã")) {
                List<Product> products = productService.getUserProducts((int) chatId);
                if (products.isEmpty()) {
                    sendText(chatId, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.");
                } else {
                    StringBuilder sb = new StringBuilder("–í–∞—à–∏ —Ç–æ–≤–∞—Ä—ã:\n");
                    int i = 1;
                    for (Product p : products) {
                        String minPrice = (p.getCurrentMinPrice() == null) ? "–µ—â—ë –Ω–µ—Ç –ª–æ—Ç–æ–≤" : p.getCurrentMinPrice() + " ‚ÇΩ";
                        sb.append(i++).append(". ")
                                .append(p.getName())
                                .append(" ‚Äî ").append(minPrice).append("\n");
                    }
                    sendText(chatId, sb.toString());
                }
            } else {
                sendText(chatId, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é.");
            }

        } catch (Exception e) {
            sendText(chatId, "‚ö† –û—à–∏–±–∫–∞: " + e.getMessage());
            e.printStackTrace();
        }
    }

    private void sendText(long chatId, String text) {
        try {
            execute(SendMessage.builder()
                    .chatId(chatId)
                    .text(text)
                    .build());
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    private void sendMessage(SendMessage message) {
        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }
}